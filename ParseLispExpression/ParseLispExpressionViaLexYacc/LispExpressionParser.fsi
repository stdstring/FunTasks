// Signature file for parser generated by fsyacc
module LispExpressionParser
type token = 
  | EOF
  | OPEN_BRACKET
  | CLOSE_BRACKET
  | ADD
  | MULT
  | LET
  | INT of (int)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_OPEN_BRACKET
    | TOKEN_CLOSE_BRACKET
    | TOKEN_ADD
    | TOKEN_MULT
    | TOKEN_LET
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_addExpression
    | NONTERM_multExpression
    | NONTERM_letExpression
    | NONTERM_variableExpressionPairList
    | NONTERM_expression
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (LispExpressionDefs.Expression) 
